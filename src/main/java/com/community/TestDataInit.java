package com.community;

import com.community.account.entity.Account;
import com.community.account.repository.AccountRepository;
import com.community.board.entity.Board;
import com.community.board.repository.BoardRepository;
import com.community.forum.Forum;
import com.community.forum.ForumRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.time.LocalDateTime;

@Component
@RequiredArgsConstructor
public class TestDataInit {

    private final AccountRepository accountRepository;
    private final ForumRepository forumRepository;
    private final BoardRepository boardRepository;
    private final PasswordEncoder passwordEncoder;

    @PostConstruct
    public void init() {
        String BOARD_CONTENT_VALUE = "Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n" +
                "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n" +
                "Ut enim ad minim veniam,\n" +
                "quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n" +
                "Duis aute irure dolor in\n" +
                "reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n" +
                "Excepteur sint occaecat cupidatat non proident,\n" +
                "sunt in culpa qui officia deserunt mollit anim id est laborum.";
        String BOARD_CONTENT_VALUE2 = "Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n" +
                "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n" +
                "Ut enim ad minim veniam,\n" +
                "quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n" +
                "Duis aute irure dolor in\n" +
                "reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n" +
                "Excepteur sint occaecat cupidatat non proident,\n" +
                "sunt in culpa qui officia deserunt mollit anim id est laborum.";

        String FORUM_TEST_CONTENT_VALUE1= "<p data-ke-size=\"size16\" style=\"margin-bottom: 20px; padding-right: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Noto Sans KR&quot;, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; font-size: 16px; padding-top: 0px !important; padding-bottom: 0px !important;\"><span style=\"font-size: 18pt;\"><b><span style=\"color: rgb(0, 0, 0);\">Spring Framework란?</span></b></span></p><p data-ke-size=\"size16\" style=\"margin-bottom: 20px; padding-right: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Noto Sans KR&quot;, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; font-size: 16px; padding-top: 0px !important; padding-bottom: 0px !important;\"><span style=\"font-size: 12pt; color: rgb(0, 0, 0);\">자바 플랫폼을 위한 오픈소스 애플리케이션 프레임워크로서 엔터프라이즈급 애플리케이션을 개발하기 위한 모든 기능을 종합적으로 제공하는 경량화된 솔루션입니다.</span></p><p data-ke-size=\"size16\" style=\"margin-bottom: 20px; padding-right: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Noto Sans KR&quot;, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; font-size: 16px; padding-top: 0px !important; padding-bottom: 0px !important;\"><span style=\"font-size: 12pt; color: rgb(0, 0, 0);\">엔터프라이즈급 개발이란 뜻대로만 풀이하면 기업을 대상으로 하는 개발이라는 말입니다.&nbsp;</span><span style=\"font-size: 12pt; color: rgb(0, 0, 0);\">즉, 대규모 데이터 처리와 트랜잭션이 동시에 여러 사용자로 부터 행해지는 매우 큰 규모의 환경을 엔터프라이즈 환경이라 일컫습니다.</span></p><p data-ke-size=\"size16\" style=\"margin-bottom: 20px; padding-right: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Noto Sans KR&quot;, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; font-size: 16px; padding-top: 0px !important; padding-bottom: 0px !important;\"><b><span style=\"color: rgb(255, 0, 0);\">Spirng Framework는 경량 컨테이너로 자바 객체를 담고 직접 관리</span></b><span style=\"color: rgb(0, 0, 0);\">합니다.&nbsp;객체의 생성 및&nbsp;소멸 그리고&nbsp;라이프 사이클을관리하며&nbsp;언제든 Spring 컨테이너로 부터 필요한 객체를 가져와 사용할 수 있습니다.&nbsp;</span></p><p data-ke-size=\"size16\" style=\"margin-bottom: 20px; padding-right: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Noto Sans KR&quot;, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; font-size: 16px; padding-top: 0px !important; padding-bottom: 0px !important;\"><span style=\"color: rgb(0, 0, 0);\">이는 Spirng이 IOC 기반의 Framework임을 의미합니다.</span></p><p data-ke-size=\"size16\" style=\"margin-bottom: 20px; padding-right: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Noto Sans KR&quot;, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; font-size: 16px; padding-top: 0px !important; padding-bottom: 0px !important;\">&nbsp;</p><p data-ke-size=\"size16\" style=\"margin-bottom: 20px; padding-right: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Noto Sans KR&quot;, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; font-size: 16px; padding-top: 0px !important; padding-bottom: 0px !important;\"><span style=\"font-size: 18pt;\"><b><span style=\"color: rgb(0, 0, 0);\">Spring Framework는 IOC기반이다. IOC란?</span></b></span></p><p data-ke-size=\"size16\" style=\"margin-bottom: 20px; padding-right: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Noto Sans KR&quot;, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; font-size: 16px; padding-top: 0px !important; padding-bottom: 0px !important;\"><span style=\"font-size: 12pt;\">&nbsp;</span></p><p data-ke-size=\"size16\" style=\"margin-bottom: 20px; padding-right: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Noto Sans KR&quot;, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; font-size: 16px; padding-top: 0px !important; padding-bottom: 0px !important;\"><span style=\"font-size: 12pt; color: rgb(0, 0, 0);\">IOC는&nbsp;</span><span style=\"color: rgb(0, 0, 0);\">Inversion of Control의 약자로 말 그대로 제어의 역전입니다.&nbsp;그럼 제어의 역전이란 무엇일까요?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p><p data-ke-size=\"size16\" style=\"margin-bottom: 20px; padding-right: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Noto Sans KR&quot;, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; font-size: 16px; padding-top: 0px !important; padding-bottom: 0px !important;\">&nbsp;</p><p data-ke-size=\"size16\" style=\"margin-bottom: 20px; padding-right: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Noto Sans KR&quot;, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; font-size: 16px; padding-top: 0px !important; padding-bottom: 0px !important;\"><span style=\"color: rgb(0, 0, 0);\">일반적으로 지금까지&nbsp;프로그램은</span></p><p data-ke-size=\"size16\" style=\"margin-bottom: 20px; padding-right: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Noto Sans KR&quot;, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; font-size: 16px; padding-top: 0px !important; padding-bottom: 0px !important;\"><span style=\"color: rgb(0, 0, 0);\">객체 결정 및 생성 -&gt; 의존성 객체 생성 -&gt; 객채 내의 메소드 호출 하는 작업을 반복했습니다.&nbsp;</span></p><p data-ke-size=\"size16\" style=\"margin-bottom: 20px; padding-right: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Noto Sans KR&quot;, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; font-size: 16px; padding-top: 0px !important; padding-bottom: 0px !important;\"><span style=\"color: rgb(0, 0, 0);\">이는 각 객체들이 프로그램의 흐름을 결정하고 각 객체를 구성하는 작업에 직접적으로 참여한 것입니다.</span></p><p data-ke-size=\"size16\" style=\"margin-bottom: 20px; padding-right: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Noto Sans KR&quot;, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; font-size: 16px; padding-top: 0px !important; padding-bottom: 0px !important;\"><span style=\"color: rgb(255, 0, 0);\"><b>즉, 모든 작업을 사용자가 제어하는 구조인 것입니다.</b></span></p><p data-ke-size=\"size16\" style=\"margin-bottom: 20px; padding-right: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Noto Sans KR&quot;, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; font-size: 16px; padding-top: 0px !important; padding-bottom: 0px !important;\">&nbsp;</p><p data-ke-size=\"size16\" style=\"margin-bottom: 20px; padding-right: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Noto Sans KR&quot;, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; font-size: 16px; padding-top: 0px !important; padding-bottom: 0px !important;\"><span style=\"font-size: 12pt; color: rgb(0, 0, 0);\">하지만 IOC에서는 이 흐름의 구조를 바꿉니다. IOC에서의</span><span style=\"font-size: 12pt; color: rgb(0, 0, 0);\">&nbsp;객체는 자기가 사용할 객체를 선택하거나 생성하지 않는다. 또한 자신이 어디서 만들어지고 어떻게 사용되는지 또한 모릅니다. 자신의 모든 권한을 다른 대상에 위임함으로 써 제어권한을 위임받은 특별한 객체에 의해 결정되고 만들어집니다.</span></p><p data-ke-size=\"size16\" style=\"margin-bottom: 20px; padding-right: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Noto Sans KR&quot;, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; font-size: 16px; padding-top: 0px !important; padding-bottom: 0px !important;\"><b><span style=\"font-size: 12pt; color: rgb(255, 0, 0);\">즉,&nbsp;</span><span style=\"font-size: 12pt; color: rgb(255, 0, 0);\">제어의 흐름을 사용자가 컨트롤 하지 않고 위임한 특별한 객체에 모든 것을 맡기는 것입니다.</span></b></p><p data-ke-size=\"size16\" style=\"margin-bottom: 20px; padding-right: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Noto Sans KR&quot;, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; font-size: 16px; padding-top: 0px !important; padding-bottom: 0px !important;\">&nbsp;</p><p data-ke-size=\"size16\" style=\"margin-bottom: 20px; padding-right: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Noto Sans KR&quot;, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; font-size: 16px; padding-top: 0px !important; padding-bottom: 0px !important;\"><b><span style=\"color: rgb(255, 0, 0);\">IOC란 기존 사용자가 모든 작업을 제어하던 것을&nbsp;특별한 객체에 모든 것을 위임하여&nbsp;객체의 생성부터 생명주기 등 모든 객체에 대한 제어권이 넘어 간 것을 IOC, 제어의 역전 이라고 합니다.</span></b></p>";
        String FORUM_TEST_CONTENT_VALUE2 = "<h4 data-ke-size=\"size20\" style=\"font-size: 18px; margin-top: 24px; margin-bottom: 24px; font-weight: normal; color: rgba(0, 0, 0, 0.87); line-height: 1.33; font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Noto Sans KR&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; -webkit-text-stroke-width: 0.02px;\"><b>2. SpringBoot 장점</b></h4><p data-ke-size=\"size16\" style=\"padding-right: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Noto Sans KR&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; font-size: 16px; -webkit-text-stroke-width: 0.02px; padding-top: 0px !important; padding-bottom: 0px !important;\"><b>1) 라이브러리 관리 자동화</b><br>- Maven의 기능과 ‘starter’ 컴포넌트들을 이용해 라이브러리 의존성을 간단히 처리<br><b>2) 설정 자동화</b><br>- 프로젝트에 추가된 라이브러리를 기반으로, 실행에 필요한 환경을 자동 설정<br><b>3) 라이브러리 버전 자동 관리</b><br>- Spring 라이브러리 뿐만 아니라 Third-party 라이브러리까지 호환되는 버전으로 자동 다운로드<br><b>4) 테스트 환경</b><br>- JUnit을 비롯한 테스트 라이브러리가 내장되어 있음<br><b>5) 서버 내장</b><br>- 내장형 Tomcat, Jetty 또는 Undertow 를 지원 (war 배포시 불필요)<br>- 내장형 서버를 기반으로 main 메서드를 실행하는 방식으로 서버를 구동할 수 있어, 보다 빠르게 실행 결과 확인 가능<br><b>5) 독립적으로 실행 가능한 JAR</b><br>- 단독 실행이 가능한 스프링 어플리케이션을 생성<br>- War가 아닌 Jar파일로 패키징하여 배포 및 실행 가능<br><b>6) 설정을 위한 XML 코드 대신에 properties 및 yaml 파일 사용</b><br><b>7) 상용화 수준의 통계 (metrics), 상태 점검 (health check) 및 외부 설정 제공</b></p><h4 data-ke-size=\"size20\" style=\"font-size: 18px; margin-top: 24px; margin-bottom: 24px; font-weight: normal; color: rgba(0, 0, 0, 0.87); line-height: 1.33; font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Noto Sans KR&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; -webkit-text-stroke-width: 0.02px;\"><b>3. SpringBoot Starters</b></h4><p data-ke-size=\"size16\" style=\"padding-right: 0px; padding-left: 0px; color: rgb(51, 51, 51); font-family: &quot;Apple SD Gothic Neo&quot;, &quot;Noto Sans KR&quot;, &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, Dotum, 돋움, &quot;Nanum Gothic&quot;, Lato, Helvetica, sans-serif; font-size: 16px; -webkit-text-stroke-width: 0.02px; padding-top: 0px !important; padding-bottom: 0px !important;\">- 스타터(Starter) 컴포넌트는 응용 프로그램에 포함할 수 있는 편리한 종속성 관리의 집합이다.<br>- 샘플코드와 복사/붙여넣기의 의존성 관리를 거치지 않고도 필요한 모든 Spring 관련 기술을 한번에 관리할 수 있다.<br>- 스타터(Starter)에는 프로젝트를 신속하게 시작하고 실행하는데 필요한 많은 종속성이 포함되어 있으며 일관되게 지원 관리되는 종속성 세트를 제공한다.</p>";
        String FORUM_TEST_CONTENT_VALUE3 = "<h2 id=\"spring\" style=\"margin-top: 2em; margin-bottom: 0.5em; line-height: 1.2; font-family: -apple-system, &quot;system-ui&quot;, Roboto, &quot;Segoe UI&quot;, &quot;Helvetica Neue&quot;, &quot;Lucida Grande&quot;, Arial, sans-serif; font-weight: bold; font-size: 1.25em; transition: all 0.2s ease-in-out 0s; padding-bottom: 0.5em; border-bottom-width: 1px; border-bottom-color: rgb(242, 243, 243); color: rgb(61, 65, 68);\">Spring<a class=\"header-link\" href=\"http://dawoonjeong.com/spring-spring_mvc-vs-spring_boot-vs-spring_mvc/#spring\" title=\"Permalink\" style=\"color: rgb(47, 125, 149); text-decoration: none; transition: opacity 0.2s ease-in-out 0.1s; position: relative; left: 0.5em; opacity: 0; font-size: 0.8em;\"><span class=\"sr-only\" style=\"transition: all 0.2s ease-in-out 0s;\">Permalink</span><span class=\"fas fa-link\" style=\"transition: all 0.2s ease-in-out 0s; -webkit-font-smoothing: antialiased; display: inline-block; font-variant-numeric: normal; font-variant-east-asian: normal; text-rendering: auto; line-height: 1; font-family: &quot;Font Awesome 5 Free&quot;;\"></span></a></h2><ul style=\"orphans: 3; widows: 3; color: rgb(61, 65, 68); font-family: -apple-system, &quot;system-ui&quot;, Roboto, &quot;Segoe UI&quot;, &quot;Helvetica Neue&quot;, &quot;Lucida Grande&quot;, Arial, sans-serif; font-size: 18px;\"><li style=\"margin-bottom: 0.5em; font-size: 1em;\">오픈 소스 경량 프레임 워크</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">자바 개발자가 간단하고 안정적이며 확장 가능한 엔터프라이즈 애플리케이션을 빌드 할 수 있도록 함</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">비즈니스 개체를 관리하는 데 도움이되는 다양한 방법을 제공하는 데 중점을 둠</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">Java 데이터베이스 연결 (JDBC), JavaServer Pages (JSP) 및 Java Servlet과 같은 기존 Java 프레임 워크 및 API (Application Programming Interface)에 비해 웹 애플리케이션 개발이 훨씬 쉬워짐</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">AOP (Aspect-Oriented Programming), POJO (Plain Old Java Object) 및 DI (dependency injection)와 같은 다양한 새로운 기술을 사용하여 엔터프라이즈 애플리케이션을 개발<ul style=\"margin-top: 0.5em;\"><li style=\"margin-bottom: 0.5em; font-size: 1em;\">스프링 AOP 같은 서브 프레임 워크라고도 층의 집합</li></ul></li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">Spring 개체 관계형 매핑 (Spring ORM). Spring Web Flow 및 Spring Web MVC 등이 있음<ul style=\"margin-top: 0.5em;\"><li style=\"margin-bottom: 0.5em; font-size: 1em;\">웹 응용 프로그램을 구성하는 동안 이러한 모듈을 별도로 사용 가능</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">모듈은 웹 응용 프로그램에서 더 나은 기능을 제공하기 위해 함께 그룹화 가능</li></ul></li></ul><h2 id=\"spring-mvc\" style=\"margin-top: 2em; margin-bottom: 0.5em; line-height: 1.2; font-family: -apple-system, &quot;system-ui&quot;, Roboto, &quot;Segoe UI&quot;, &quot;Helvetica Neue&quot;, &quot;Lucida Grande&quot;, Arial, sans-serif; font-weight: bold; font-size: 1.25em; transition: all 0.2s ease-in-out 0s; padding-bottom: 0.5em; border-bottom-width: 1px; border-bottom-color: rgb(242, 243, 243); color: rgb(61, 65, 68);\">Spring MVC<a class=\"header-link\" href=\"http://dawoonjeong.com/spring-spring_mvc-vs-spring_boot-vs-spring_mvc/#spring-mvc\" title=\"Permalink\" style=\"color: rgb(47, 125, 149); text-decoration: none; transition: opacity 0.2s ease-in-out 0.1s; position: relative; left: 0.5em; opacity: 0; font-size: 0.8em;\"><span class=\"sr-only\" style=\"transition: all 0.2s ease-in-out 0s;\">Permalink</span><span class=\"fas fa-link\" style=\"transition: all 0.2s ease-in-out 0s; -webkit-font-smoothing: antialiased; display: inline-block; font-variant-numeric: normal; font-variant-east-asian: normal; text-rendering: auto; line-height: 1; font-family: &quot;Font Awesome 5 Free&quot;;\"></span></a></h2><ul style=\"orphans: 3; widows: 3; color: rgb(61, 65, 68); font-family: -apple-system, &quot;system-ui&quot;, Roboto, &quot;Segoe UI&quot;, &quot;Helvetica Neue&quot;, &quot;Lucida Grande&quot;, Arial, sans-serif; font-size: 18px;\"><li style=\"margin-bottom: 0.5em; font-size: 1em;\">Spring은 확장 가능한 애플리케이션을 만드는 데 널리 사용 되는 Spring MVC 프레임 워크를 제공</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">Spring MVC 프레임 워크는 Model View, Controller라는 모듈의 분리를 가능하게하고 애플리케이션 통합을 원활하게 처리</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">개발자는 일반 Java 클래스를 사용하여 복잡한 응용 프로그램을 만들 수 있음</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">모델 객체는 맵을 사용하여 뷰와 컨트롤러간에 전달</li></ul><h2 id=\"spring-boot\" style=\"margin-top: 2em; margin-bottom: 0.5em; line-height: 1.2; font-family: -apple-system, &quot;system-ui&quot;, Roboto, &quot;Segoe UI&quot;, &quot;Helvetica Neue&quot;, &quot;Lucida Grande&quot;, Arial, sans-serif; font-weight: bold; font-size: 1.25em; transition: all 0.2s ease-in-out 0s; padding-bottom: 0.5em; border-bottom-width: 1px; border-bottom-color: rgb(242, 243, 243); color: rgb(61, 65, 68);\">Spring Boot<a class=\"header-link\" href=\"http://dawoonjeong.com/spring-spring_mvc-vs-spring_boot-vs-spring_mvc/#spring-boot\" title=\"Permalink\" style=\"color: rgb(47, 125, 149); text-decoration: none; transition: opacity 0.2s ease-in-out 0.1s; position: relative; left: 0.5em; opacity: 0; font-size: 0.8em;\"><span class=\"sr-only\" style=\"transition: all 0.2s ease-in-out 0s;\">Permalink</span><span class=\"fas fa-link\" style=\"transition: all 0.2s ease-in-out 0s; -webkit-font-smoothing: antialiased; display: inline-block; font-variant-numeric: normal; font-variant-east-asian: normal; text-rendering: auto; line-height: 1; font-family: &quot;Font Awesome 5 Free&quot;;\"></span></a></h2><ul style=\"orphans: 3; widows: 3; color: rgb(61, 65, 68); font-family: -apple-system, &quot;system-ui&quot;, Roboto, &quot;Segoe UI&quot;, &quot;Helvetica Neue&quot;, &quot;Lucida Grande&quot;, Arial, sans-serif; font-size: 18px;\"><li style=\"margin-bottom: 0.5em; font-size: 1em;\">Spring Boot는 기존의 스프링 프레임 워크 위에 구축 (스프링 프레임 워크 기반)</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">스프링의 모든 기능을 제공하면서도 스프링보다 사용하기 쉬움</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">Spring Boot는 마이크로 서비스 기반 프레임 워크이며 매우 짧은 시간에 프로덕션 준비 애플리케이션을 만듦</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">Spring Boot에서는 모든 것이 자동으로 구성됨</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">특정 기능을 활용하기 위해 적절한 구성을 사용하기 만</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">Spring Boot는 REST API를 개발하려는 경우 매우 유용</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">Spring Boot는 프로젝트를 war 또는 jar 파일로 변환하는 기능을 제공</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">Tomcat의 인스턴스는 클라우드에서도 실행 가능</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">자주 사용하는 라이브러리가 미리 조합되어있음</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">복잡한 설정이 자동 처리됨</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">내장서버를 포함 (톰캣) 서버를 추가로 설치하지 않아도 바로 개발 가능</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">톰캣, 제티와 같은 WAS에 배포하지 않고도 실행할 수 있는 jar 파일로 웹어플리케이션 개발 가능</li></ul><h3 id=\"spring-boot의-4계층\" style=\"margin-top: 2em; margin-bottom: 0.5em; line-height: 1.2; font-family: -apple-system, &quot;system-ui&quot;, Roboto, &quot;Segoe UI&quot;, &quot;Helvetica Neue&quot;, &quot;Lucida Grande&quot;, Arial, sans-serif; font-weight: bold; font-size: 1.125em; color: rgb(61, 65, 68);\">Spring boot의 4계층<a class=\"header-link\" href=\"http://dawoonjeong.com/spring-spring_mvc-vs-spring_boot-vs-spring_mvc/#spring-boot%EC%9D%98-4%EA%B3%84%EC%B8%B5\" title=\"Permalink\" style=\"color: rgb(47, 125, 149); text-decoration: none; transition: opacity 0.2s ease-in-out 0.1s; position: relative; left: 0.5em; opacity: 0; font-size: 0.8em;\"><span class=\"sr-only\" style=\"transition: all 0.2s ease-in-out 0s;\">Permalink</span><span class=\"fas fa-link\" style=\"transition: all 0.2s ease-in-out 0s; -webkit-font-smoothing: antialiased; display: inline-block; font-variant-numeric: normal; font-variant-east-asian: normal; text-rendering: auto; line-height: 1; font-family: &quot;Font Awesome 5 Free&quot;;\"></span></a></h3><ul style=\"orphans: 3; widows: 3; color: rgb(61, 65, 68); font-family: -apple-system, &quot;system-ui&quot;, Roboto, &quot;Segoe UI&quot;, &quot;Helvetica Neue&quot;, &quot;Lucida Grande&quot;, Arial, sans-serif; font-size: 18px;\"><li style=\"margin-bottom: 0.5em; font-size: 1em;\">Presentation Layer : 이름에서 알 수 있듯이 view (예 : front-end 부분)로 구성</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">Data Access Layer : 데이터베이스에 대한 CRUD (create, retrieve, update, delete)</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">Service Layer : 서비스 클래스로 구성되며 데이터 액세스 계층에서 제공하는 서비스를 사용</li><li style=\"margin-bottom: 0.5em; font-size: 1em;\">Integration Layer : 웹별 웹 서비스 (인터넷을 통해 사용 가능한 모든 서비스 및 XML 메시징 시스템 사용)로 구성</li></ul>";

        if (!accountRepository.existsByStudentId("17-100000")) {
            accountRepository.save(new Account(null, "test@naver.com", "tester", "17-100000", "테스터", passwordEncoder.encode("test1234!"),
                    true, "asdf", LocalDateTime.now().minusHours(1), LocalDateTime.now().minusHours(1), null,
                    null, null, null, null, null, null, true, true, true,
                    true, true, true, null));
            boardRepository.save(new Board(null, "신입생게시판", "신입생게시판 제목",null, null, false,0,BOARD_CONTENT_VALUE, "tester", 1L, 0, LocalDateTime.now().minusMinutes(20), null));
            boardRepository.save(new Board(null, "졸업생게시판", "졸업생게시판 제목",null, null, false,0,BOARD_CONTENT_VALUE, "tester", 1L, 0, LocalDateTime.now().minusSeconds(40), null));
            boardRepository.save(new Board(null, "졸업생게시판", "신고된 졸업 게시글",null, null, true,5,BOARD_CONTENT_VALUE, "tester", 1L, 0, LocalDateTime.now().minusSeconds(40), null));
            forumRepository.save(new Forum(null, "forum", "java", accountRepository.findByEmail("test@naver.com"), "Spring FrameWork란?", "Spring에 대한 소개", LocalDateTime.now(), FORUM_TEST_CONTENT_VALUE1, false));
        }

        if (!accountRepository.existsByStudentId("17-100424")) {
            accountRepository.save(new Account(null, "dlwlgns1240@naver.com", "ezhoon", "17-100424", "이지훈", passwordEncoder.encode("12401240"),
                    true, "asdf1", LocalDateTime.now().minusHours(1), LocalDateTime.now().minusHours(1), null,
                    "잘 부탁드립니다", "https://github.com/lee-ji-hoon", "대학생", "서울, 용산", null, null, true, true,
                    true, true, true, true, null));
            boardRepository.save(new Board(null, "자유게시판", "자유게시판 제목",null, null, false, 0,BOARD_CONTENT_VALUE, "ezhoon", 2L, 0, LocalDateTime.now().minusHours(1), null));
            forumRepository.save(new Forum(null, "forum", "java", accountRepository.findByEmail("dlwlgns1240@naver.com"), "SpringBoot의 장점", "SpringBoot에 대한 설명", LocalDateTime.now(), FORUM_TEST_CONTENT_VALUE2, false));
        }

        if (!accountRepository.existsByStudentId("17-100425")) {
            accountRepository.save(new Account(null, "test1@naver.com", "tester1", "17-100425", "테스터", passwordEncoder.encode("12401240"),
                    true, "asdf1", LocalDateTime.now().minusHours(1), LocalDateTime.now().minusHours(1), null,
                    "잘 부탁드립니다", "https://github.com/lee-ji-hoon", "대학생", "서울, 용산", null, null, true, true,
                    true, true, true, true, null));
        }

        if (!accountRepository.existsByStudentId("17-100444")) {
            accountRepository.save(new Account(null, "tester0@naver.com", "jwhy", "17-100444", "준영", passwordEncoder.encode("test1234!"),
                    true, "asdf12", LocalDateTime.now().minusHours(1), LocalDateTime.now().minusHours(1), null,
                    "hello", "https://github.com/Jwhyee", "대학생", "경기도, 수원", null, null, true, true,
                    true, true, true, true, null));
            boardRepository.save(new Board(null, "자유게시판", "자유게시판 제목",null, null, false, 0,FORUM_TEST_CONTENT_VALUE3, "jwhy", 3L, 0, LocalDateTime.now().minusHours(1), null));
            forumRepository.save(new Forum(null, "forum", "java", accountRepository.findByEmail("tester0@naver.com"), "Spring VS SpringBoot", "스프링과 스프링 부트에 대한 차이를 설명하는 글", LocalDateTime.now(), FORUM_TEST_CONTENT_VALUE1, false));

        }
    }
}